# Base Image: Use NVIDIA CUDA 11.4.3 runtime image based on Ubuntu 20.04
# This provides a CUDA environment suitable for GPU-accelerated applications.
FROM nvidia/cuda:11.4.3-runtime-ubuntu20.04

# Environment Variables
# PYTHONUNBUFFERED: Prevents Python from buffering stdout and stderr.
# DEBIAN_FRONTEND: Disables interactive input during package installations.
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive
ENV TIMESTAMP=1703120026

# System Package Installation
# Updates the package list and installs essential tools and libraries.
RUN apt-get update
RUN apt-get install -y wget             # For downloading files from the internet.
RUN apt-get install -y python3.10       # Python 3.10.
RUN apt-get install -y python3-pip      # Pip for Python 3.
RUN apt-get install -y libopenblas-base # OpenBLAS library, an optimized BLAS library.
RUN apt-get install -y libomp-dev       # OpenMP library for parallelism in C/C++ and Fortran.

# Python Package Management
# Upgrades pip to the latest version.
RUN pip3 install --upgrade pip 

# Python Library Installation
# Installs specific Python libraries with a timeout to prevent hanging.
RUN pip3 install --default-timeout=1000 safetensors
RUN pip3 install --default-timeout=1000 triton

# Miniconda Installation
# Downloads and installs Miniconda, a minimal installer for conda.
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh \
    && bash ~/miniconda.sh -b -p /root/miniconda3 \
    && rm ~/miniconda.sh

# Updates PATH environment variable to include the conda binary.
ENV PATH="/root/miniconda3/bin:${PATH}"

# Updates the conda base environment.
RUN conda update -n base -c defaults conda

# Conda Solver Setting
# Sets the conda solver algorithm to 'classic' for dependency resolution.
ENV CONDA_SOLVER=classic

# Conda Environment Creation and Activation
# Creates a new conda environment named 'nvidia_gpu_env' with Python 3.10.
RUN conda create -n nvidia_gpu_env python=3.10 -y

# Updates PATH to use the binaries in the created conda environment.
ENV PATH /opt/conda/envs/nvidia_gpu_env/bin:$PATH

# Configures bash to activate the 'nvidia_gpu_env' environment on start.
RUN echo "source activate nvidia_gpu_env" > ~/.bashrc
ENV PATH /opt/conda/envs/nvidia_gpu_env/bin:$PATH

# Conda Package Installation

# CUDA Toolkit for GPU-accelerated computing
RUN conda install cudatoolkit=11.4  -c conda-forge -y                 # CUDA Toolkit 11.4 for NVIDIA GPUs
RUN conda install pytorch           -c pytorch -c nvidia -y           # PyTorch for deep learning
RUN conda install pytorch-cuda      -c pytorch -c nvidia -y           # PyTorch for deep learning
# RUN conda install transformers      -c huggingface -y                 # Transformers for state-of-the-art NLP
# RUN conda install faiss-gpu=1.7.4   -c pytorch -c nvidia -y           # FAISS for efficient similarity search, specifically GPU version

# # Install other dependencies from conda-forge
# RUN conda install blas -c conda-forge -y              # BLAS library for linear algebra operations
# RUN conda install filelock -c conda-forge -y          # Filelock for locking files during operations
# RUN conda install freetype -c conda-forge -y          # Freetype for font rendering
# RUN conda install gmp -c conda-forge -y               # GNU Multiple Precision Arithmetic Library
# RUN conda install gnutls -c conda-forge -y            # GnuTLS for secure communication
# RUN conda install intel-openmp -c conda-forge -y      # Intel OpenMP for parallel programming
# RUN conda install jinja2 -c conda-forge -y            # Jinja2 for templating in Python
# RUN conda install lerc -c conda-forge -y              # LERC for image compression
# RUN conda install libblas -c conda-forge -y           # libBLAS, an optimized implementation of BLAS
# RUN conda install libcblas -c conda-forge -y          # libcblas, C interface to BLAS
# RUN conda install libdeflate -c conda-forge -y        # libdeflate for data compression
# RUN conda install libgfortran-ng -c conda-forge -y    # libgfortran-ng, Fortran support
# RUN conda install libgfortran5 -c conda-forge -y      # libgfortran5, newer Fortran support
# RUN conda install libhwloc -c conda-forge -y          # libhwloc for hardware locality
# RUN conda install libiconv -c conda-forge -y          # libiconv for character encoding conversion
# RUN conda install liblapack -c conda-forge -y         # libLAPACK for linear algebra routines
# RUN conda install llvm-openmp -c conda-forge -y       # LLVMs OpenMP for parallel programming
# RUN conda install markupsafe -c conda-forge -y        # MarkupSafe for safe string handling
# RUN conda install mkl -c conda-forge -y               # Intel Math Kernel Library for mathematical computing
# RUN conda install mpmath -c conda-forge -y            # mpmath for arbitrary-precision arithmetic
# RUN conda install nettle -c conda-forge -y            # Nettle for cryptographic functionality
# RUN conda install networkx -c conda-forge -y          # NetworkX for network analysis
# RUN conda install numpy -c conda-forge -y             # NumPy for numerical processing
# RUN conda install pytorch-mutex -c conda-forge -y     # PyTorch Mutex for managing PyTorch installations
# RUN conda install pyyaml -c conda-forge -y            # PyYAML for YAML support
# RUN conda install sympy -c conda-forge -y             # SymPy for symbolic mathematics
# RUN conda install tbb -c conda-forge -y               # Threading Building Blocks for parallel computing
# RUN conda install typing_extensions -c conda-forge -y # Typing Extensions for additional typing features
# RUN conda install yaml -c conda-forge -y              # YAML parser and emitter
# RUN conda install fsspec -c conda-forge -y            # fsspec for file system interfaces
# RUN conda install packaging -c conda-forge -y         # Packaging utilities for Python
# RUN conda install regex -c conda-forge -y             # Regex for advanced regular expressions
# RUN conda install requests -c conda-forge -y          # Requests for HTTP requests
# RUN conda install tokenizers -c conda-forge -y        # Tokenizers for efficient text tokenization
# RUN conda install tqdm -c conda-forge -y              # tqdm for progress bars in loops
# RUN conda install flask -c conda-forge -y             # Flask for web application framework